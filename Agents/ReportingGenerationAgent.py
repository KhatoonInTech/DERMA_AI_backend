# Agents/ReportingAgent.py

import time
import markdown as md
import weasyprint
import io
from typing import Dict, Any, Optional
# Import search functions if needed for images
from Agents.SearchEngineAgent import search_google, get_urls_from_search

def generate_report_markdown(final_assessment: Dict[str, Any], visual_description: Optional[str] = None) -> str:
    """Generates a Markdown report from the final assessment data."""
    if not final_assessment:
        return "Error: No final assessment data provided to generate report."

    # Safely get data with fallbacks
    disease = final_assessment.get("final_diagnosis", "N/A")
    reasoning = final_assessment.get("reasoning", "No reasoning provided.")
    causes = final_assessment.get("possible_causes_triggers", "No specific causes identified.")
    treatment = final_assessment.get("general_treatment_options", "No general treatment options provided.")
    when_to_see_doc = final_assessment.get("when_to_see_doctor", "Consult a doctor if concerned.")

    # Start Markdown report
    report_md = f"# Simulated Dermatological Assessment Report\n\n"
    report_md += f"**Date:** {time.strftime('%Y-%m-%d %H:%M:%S Z')}\n\n"
    report_md += "---\n"
    report_md += f"## Assessment Summary\n\n"
    report_md += f"**Assessed Condition (Simulated):** {disease}\n\n"
    report_md += f"**Reasoning based on Session:**\n{reasoning}\n\n"

    if visual_description:
        # Sanitize visual description slightly for Markdown
        safe_visual_desc = visual_description.replace('\n', '\n> ') # Make it look like a quote
        report_md += f"**Initial Visual Description Provided:**\n> {safe_visual_desc}\n\n"

    # Optional: Add representative image (search for it)
    print(f"Searching for representative image of: {disease}")
    img_search_results = search_google(f"{disease} skin condition clinical appearance", search_type="image", max_results=3)
    img_urls = get_urls_from_search(img_search_results, max_urls=1)

    if img_urls:
        # Basic check for common image formats in URL - allows data URIs too now
        if any(ext in img_urls[0].lower() for ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp']) or img_urls[0].startswith('data:image'):
            # Escape potential markdown characters in URL, though less common
            img_url_safe = img_urls[0].replace("(", "%28").replace(")", "%29")
            report_md += f"**Representative Image (Illustration Only - Not Patient's):**\n"
            # Provide alt text
            report_md += f"![Representative image illustrating {disease}]({img_url_safe})\n\n"
            print(f"  Added representative image URL: {img_url_safe[:80]}...")
        else:
            print(f"  Skipping potential image URL, doesn't look like a direct image link or common format: {img_urls[0][:80]}...")

    report_md += f"## Possible Causes & Triggers (General Information)\n{causes}\n\n"
    report_md += f"## General Treatment Approaches (Informational Only)\n{treatment}\n\n"
    report_md += f"## When to Consult a Healthcare Professional\n{when_to_see_doc}\n\n"
    report_md += "---\n"
    report_md += "This report summarizes a simulated interaction generated by an AI model for informational purposes only. It does **not** constitute medical advice, diagnosis, or a treatment plan. Information is derived from AI analysis and web searches, and may not be fully accurate, complete, or applicable to your specific situation. A qualified healthcare professional must be consulted for any health concerns.\n"

    print("✅ Report Markdown generated.")
    return report_md

def generate_pdf_from_md(md_text: str) -> Optional[bytes]:
    """Converts Markdown text to PDF bytes using WeasyPrint."""
    try:
        # Convert markdown to HTML
        # Enable extensions like tables if your markdown might contain them
        html_body = md.markdown(md_text, extensions=['markdown.extensions.tables', 'markdown.extensions.fenced_code'])

        # Basic CSS for better PDF formatting
        # Added styles for blockquotes and potentially better image handling
        html_with_style = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Simulated Dermatology Report</title>
            <style>
                @page {{ margin: 1.5cm; }}
                body {{ font-family: sans-serif; line-height: 1.5; font-size: 10pt; color: #333; }}
                h1, h2, h3 {{ color: #1a1a1a; margin-top: 1.2em; margin-bottom: 0.6em; line-height: 1.3; }}
                h1 {{ font-size: 18pt; border-bottom: 2px solid #eee; padding-bottom: 6px; }}
                h2 {{ font-size: 14pt; border-bottom: 1px solid #eee; padding-bottom: 4px; }}
                h3 {{ font-size: 12pt; }}
                p, li {{ margin-bottom: 0.8em; text-align: justify; }}
                ul, ol {{ padding-left: 1.5em; }}
                strong, b {{ font-weight: bold; }}
                em, i {{ font-style: italic; }}
                blockquote {{
                    border-left: 4px solid #ccc;
                    padding-left: 1em;
                    margin-left: 0;
                    margin-right: 0;
                    margin-top: 1em;
                    margin-bottom: 1em;
                    font-style: italic;
                    color: #555;
                }}
                blockquote p {{ margin-bottom: 0.5em; }} /* Reduce spacing inside blockquote */
                img {{
                    max-width: 90%; /* Allow slightly larger images */
                    height: auto;
                    display: block;
                    margin: 1.5em auto; /* Center images with more margin */
                    border: 1px solid #ddd;
                    padding: 4px;
                    background-color: #fff; /* Ensure background is white if transparent */
                }}
                table {{ border-collapse: collapse; width: 100%; margin-bottom: 1.2em; }}
                th, td {{ border: 1px solid #ccc; padding: 8px 10px; text-align: left; }}
                th {{ background-color: #f2f2f2; font-weight: bold; }}
                hr {{ border: none; border-top: 1px solid #eee; margin: 2em 0; }}
            </style>
        </head>
        <body>{html_body}</body>
        </html>
        """

        print(f"Generating PDF...")
        # Use WeasyPrint to create PDF from HTML string
        # Add font configuration if needed, especially on Render/Linux
        # font_config = weasyprint.fonts.FontConfiguration()
        pdf_bytes = weasyprint.HTML(string=html_with_style).write_pdf() # font_config=font_config
        print("✅ PDF generated successfully!")
        return pdf_bytes

    except ImportError:
        print("❌ WeasyPrint or its dependencies not found. Cannot generate PDF.")
        print("   Ensure 'weasyprint' is in requirements.txt and system dependencies (like pango, cairo) are installed.")
        return None
    except Exception as e:
        print(f"❌ Error generating PDF: {e}")
        # Consider logging the traceback here for debugging
        # import traceback
        # traceback.print_exc()
        return None